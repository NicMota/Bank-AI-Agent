// index.js

require("dotenv").config();
const express = require("express");

// --- IMPORTA√á√ïES ---
const fs = require("fs");
const path = require("path");
const axios = require("axios");
const { v4: uuidv4 } = require("uuid"); // Lembre-se: npm install uuid@8.3.2
// const { PythonShell } = require("python-shell"); // [REMOVIDO TEMPORARIAMENTE]
// --- FIM DAS IMPORTA√á√ïES ---

const app = express();

// --- GERENCIADOR DE ESTADO DE CONVERSA ---
const userSessions = {};
// --- FIM DO GERENCIADOR DE ESTADO ---

// --- CONFIGURA√á√ÉO DE MIDDLEWARE ---
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

const PORT = process.env.PORT || 3000;

// --- CONFIGURA√á√ÉO DO CLIENTE TWILIO ---
const accountSid = process.env.TWILIO_ACCOUNT_SID;
const authToken = process.env.TWILIO_AUTH_TOKEN;
const twilioNumber = process.env.TWILIO_WHATSAPP_NUMBER;
const client = require("twilio")(accountSid, authToken);

/**
 * =======================================================
 * FUN√á√ÉO PARA ENVIAR MENSAGENS (VIA TWILIO)
 * (Sem altera√ß√µes)
 * =======================================================
 */
async function sendTwilioMessage(to, body, mediaUrl = null, actions = null) {
  console.log(`Enviando mensagem para ${to}: "${body}"`);
  try {
    const messageData = { body, from: twilioNumber, to };
    if (mediaUrl) messageData.mediaUrl = [mediaUrl];
    if (actions && actions.length > 0)
      messageData.persistentAction = actions.slice(0, 3);
    const message = await client.messages.create(messageData);
    console.log(`Mensagem enviada! SID: ${message.sid}`);
  } catch (error) {
    console.error("Erro ao enviar mensagem via Twilio:", error);
  }
}

/**
 * =======================================================
 * FUN√á√ÉO PARA CHAMAR O AGENTE PYTHON
 * [REMOVIDO TEMPORARIAMENTE]
 * =======================================================
 */
/*
async function runPythonAgent(pdfPath) {
  // ... (c√≥digo python-shell removido)
}
*/

// --- ROTAS DO SERVIDOR ---
app.get("/", (req, res) => {
  res.send("O agente est√° funcionando com Express + Twilio!");
});

/**
 * =======================================================
 * WEBHOOK DE RECEBIMENTO DE MENSAGENS (TWILIO)
 * [L√ìGICA REESTRUTURADA]
 * =======================================================
 */
app.post("/twilio-webhook", async (req, res) => {
  // --- 1. Coletar todos os dados da requisi√ß√£o ---
  const incomingMsg = req.body.Body;
  const fromNumber = req.body.From;
  const numMedia = parseInt(req.body.NumMedia || 0);

  // Prote√ß√£o para o caso de 'incomingMsg' ser nulo (quando s√≥ tem m√≠dia)
  const msgLower = (incomingMsg || "").toLowerCase().trim();

  const currentUserState = userSessions[fromNumber] || {
    state: null,
    data: {},
  };

  console.log(`[Mensagem Recebida de ${fromNumber}]`);
  console.log(`Mensagem: "${incomingMsg}" | M√≠dia: ${numMedia}`);
  console.log(`Estado Atual: ${currentUserState.state}`);

  // --- 2. L√≥gica Principal (Baseada em Estado) ---

  // 2.1. Comando "Cancelar" ou "Menu" (Prioridade M√°xima)
  if (msgLower === "menu" || msgLower === "cancelar") {
    const wasInConversation = currentUserState.state !== null;
    delete userSessions[fromNumber];
    if (wasInConversation) {
      await sendTwilioMessage(
        fromNumber,
        "Tudo bem, opera√ß√£o cancelada. üëç\nVoltando ao menu principal."
      );
    }
    const menuBody =
      "Ol√°! üëã Sou o *Assistente Digital do BTG Pactual*.\nEstou aqui para ajudar a organizar sua vida financeira.\n\n" +
      "Como posso te auxiliar agora?\n\n" +
      "Digite o n√∫mero da op√ß√£o desejada:\n" +
      "*1* - Tirar D√∫vida Financeira\n" +
      "*2* - An√°lise de Extrato (via PDF)\n" +
      "*3* - Planejamento de Metas";
    await sendTwilioMessage(fromNumber, menuBody, null);

    // 2.2. Estado: Esperando um PDF para an√°lise
  } else if (currentUserState.state === "AWAITING_PDF") {
    // O usu√°rio est√° no estado correto, agora verificamos se ele enviou m√≠dia
    if (numMedia > 0) {
      const mediaUrl = req.body.MediaUrl0;
      const mediaType = req.body.MediaContentType0;

      // Verifica se a m√≠dia √© um PDF
      if (mediaType === "application/pdf") {
        // --- IN√çCIO DA L√ìGICA DE PROCESSAMENTO DE PDF ---
        // (Esta √© a sua l√≥gica antiga, agora movida para c√°)
        console.log(`M√≠dia recebida: ${mediaUrl} (Tipo: ${mediaType})`);
        const uploadsDir = path.join(process.cwd(), "tmp/public/incoming_pdf/");
        if (!fs.existsSync(uploadsDir))
          fs.mkdirSync(uploadsDir, { recursive: true });

        const fileName = `upload_${uuidv4()}.pdf`;
        const localFilePath = path.join(uploadsDir, fileName);

        try {
          const responseMsg =
            "Perfeito! Recebi seu documento. üìÑ\nMinha IA financeira do *BTG Pactual* j√° est√° analisando os dados. Isso pode levar um momento...";
          await sendTwilioMessage(fromNumber, responseMsg);
        } catch (error) {
          console.error("Erro ao enviar a *mensagem de confirma√ß√£o*:", error);
        }

        try {
          console.log(`Baixando arquivo para: ${localFilePath}`);
          const response = await axios({
            method: "GET",
            url: mediaUrl,
            responseType: "stream",
            auth: { username: accountSid, password: authToken },
          });
          const writer = fs.createWriteStream(localFilePath);
          response.data.pipe(writer);
          await new Promise((resolve, reject) => {
            writer.on("finish", resolve);
            writer.on("error", reject);
          });
          console.log(`Arquivo salvo com sucesso: ${localFilePath}`);

          // --- SIMULA√á√ÉO DE CHAMADA PYTHON ---
          console.log(
            "[Node] SIMULA√á√ÉO: Chamando LLM de an√°lise de extrato..."
          );
          const analysisResult = {
            balance: 1234.56,
            total_income: 5000.0,
            total_expense: 3765.44,
            tips_financeiras: [
              "(Dica mockada: Voc√™ gastou muito com iFood. Considere definir um or√ßamento para delivery.)",
            ],
          };

          if (analysisResult) {
            const summaryMsg =
              `*An√°lise do BTG Conclu√≠da!* üöÄ\n\n` +
              `Aqui est√° um resumo do seu extrato:\n\n` +
              `Balan√ßo: *R$ ${analysisResult.balance.toFixed(2)}*\n` +
              `Total de Receita: R$ ${analysisResult.total_income.toFixed(
                2
              )}\n` +
              `Total de Despesas: R$ ${analysisResult.total_expense.toFixed(
                2
              )}\n\n` +
              `*Dica Financeira do BTG:*\n_${analysisResult.tips_financeiras[0]}_`;
            await sendTwilioMessage(fromNumber, summaryMsg);
          }
          fs.unlinkSync(localFilePath); // Limpa o arquivo
          console.log(`Arquivo tempor√°rio deletado: ${localFilePath}`);

          // Limpa o estado, pois a tarefa foi conclu√≠da
          delete userSessions[fromNumber];
        } catch (error) {
          console.error("Erro no processo de download/an√°lise:", error.message);
          await sendTwilioMessage(
            fromNumber,
            "Desculpe, n√£o consegui processar o seu arquivo. Parece que houve um erro no envio. Por favor, tente novamente."
          );
        }
        // --- FIM DA L√ìGICA DE PROCESSAMENTO DE PDF ---
      } else {
        // M√≠dia recebida, mas n√£o √© PDF
        const errorMsg =
          "Desculpe, este assistente aceita apenas arquivos no formato *PDF*.\n\nPor favor, envie seu extrato novamente ou digite *cancelar* para voltar.";
        await sendTwilioMessage(fromNumber, errorMsg);
      }
    } else {
      // Estado era AWAITING_PDF, mas o usu√°rio enviou TEXTO
      const errorMsg =
        "Eu estava esperando um *arquivo PDF*.\n\nPor favor, envie seu extrato ou digite *cancelar* para voltar ao menu.";
      await sendTwilioMessage(fromNumber, errorMsg);
    }

    // ==============================================================
    // 2.3. Fluxo de D√∫vida Financeira (Op√ß√£o 1)
    // ==============================================================
  } else if (currentUserState.state === "AWAITING_FINANCIAL_QUESTION") {
    currentUserState.data.question = incomingMsg;
    currentUserState.state = "AWAITING_FINANCIAL_CONTEXT_INCOME";
    userSessions[fromNumber] = currentUserState;
    const responseMsg =
      "Excelente pergunta. Para que o BTG Pactual possa te dar uma dica *personalizada* e realista, preciso de um pouco de contexto.\n\n" +
      "*Qual √© a sua renda mensal m√©dia (R$)?*\n(Ex: 5000)\n\n" +
      "_(Digite *cancelar* a qualquer momento para voltar ao menu.)_";
    await sendTwilioMessage(fromNumber, responseMsg);
  } else if (currentUserState.state === "AWAITING_FINANCIAL_CONTEXT_INCOME") {
    currentUserState.data.income = incomingMsg;
    currentUserState.state = "AWAITING_FINANCIAL_CONTEXT_EXPENSES";
    userSessions[fromNumber] = currentUserState;
    const responseMsg =
      "Entendido. E quais voc√™ diria que s√£o suas *principais categorias de gastos* hoje?\n\n" +
      "(Ex: Aluguel, Alimenta√ß√£o/iFood, Cart√£o de cr√©dito, etc.)\n\n" +
      "_(Digite *cancelar* a qualquer momento para voltar ao menu.)_";
    await sendTwilioMessage(fromNumber, responseMsg);
  } else if (currentUserState.state === "AWAITING_FINANCIAL_CONTEXT_EXPENSES") {
    currentUserState.data.expenses = incomingMsg;
    const { question, income, expenses } = currentUserState.data;

    // --- SIMULA√á√ÉO DE CHAMADA PYTHON ---
    console.log(
      "[Node] SIMULA√á√ÉO: Chamando LLM de D√∫vidas com:",
      currentUserState.data
    );
    const llmAnswer =
      `*An√°lise do BTG Pactual:*\n\n` +
      `_(Resposta do LLM: Com base na sua renda de *${income}* e gastos com *${expenses}*, a melhor forma de *${question}* √©... [placeholder da IA])_\n\n` +
      `Digite "Menu" para voltar ao in√≠cio.`;
    await sendTwilioMessage(fromNumber, llmAnswer);
    delete userSessions[fromNumber];

    // ==============================================================
    // 2.4. Fluxo de Planejamento de Meta (Op√ß√£o 3)
    // ==============================================================
  } else if (currentUserState.state === "AWAITING_GOAL_DESCRIPTION") {
    currentUserState.data.goalDescription = incomingMsg;
    currentUserState.state = "AWAITING_INCOME";
    userSessions[fromNumber] = currentUserState;
    const responseMsg =
      "√ìtimo objetivo. Agora, *qual √© a sua renda mensal m√©dia (R$)?*\n" +
      "(Ex: 5000)\n\n" +
      "_(Digite *cancelar* a qualquer momento para voltar ao menu.)_";
    await sendTwilioMessage(fromNumber, responseMsg);
  } else if (currentUserState.state === "AWAITING_INCOME") {
    currentUserState.data.monthlyIncome = incomingMsg;
    currentUserState.state = "AWAITING_TIMEFRAME";
    userSessions[fromNumber] = currentUserState;
    const responseMsg =
      "Perfeito. *Em quanto tempo voc√™ planeja alcan√ßar essa meta?*\n" +
      "(Ex: 6 meses, 1 ano)\n\n" +
      "_(Digite *cancelar* a qualquer momento para voltar ao menu.)_";
    await sendTwilioMessage(fromNumber, responseMsg);
  } else if (currentUserState.state === "AWAITING_TIMEFRAME") {
    currentUserState.data.timeframe = incomingMsg;
    currentUserState.state = "AWAITING_GOAL_PRICE";
    userSessions[fromNumber] = currentUserState;
    const responseMsg =
      "Estamos quase l√°! *Qual √© o valor total (R$)* que voc√™ precisa para esta meta?\n" +
      "(Ex: 10000)\n\n" +
      "_(Digite *cancelar* a qualquer momento para voltar ao menu.)_";
    await sendTwilioMessage(fromNumber, responseMsg);
  } else if (currentUserState.state === "AWAITING_GOAL_PRICE") {
    currentUserState.data.goalPrice = incomingMsg;
    const { goalDescription, monthlyIncome, timeframe, goalPrice } =
      currentUserState.data;

    // --- SIMULA√á√ÉO DE CHAMADA PYTHON ---
    console.log(
      "[Node] SIMULA√á√ÉO: Chamando LLM de Metas com:",
      currentUserState.data
    );
    const llmPlan =
      `*Plano de Metas (BTG Pactual):*\n\n` +
      `_(Resposta do LLM: Para *${goalDescription}* (R$${goalPrice}) em *${timeframe}*, ganhando *R$${monthlyIncome}*, voc√™ deve... [placeholder da IA])_\n\n` +
      `Digite "Menu" para voltar ao in√≠cio.`;
    await sendTwilioMessage(fromNumber, llmPlan);
    delete userSessions[fromNumber];

    // ==============================================================
    // 2.5. Comandos do Menu (Nenhum estado ativo)
    // ==============================================================
  } else if (msgLower === "1") {
    // --- INICIA A CONVERSA DE D√öVIDA ---
    userSessions[fromNumber] = {
      state: "AWAITING_FINANCIAL_QUESTION",
      data: {},
    };
    const responseMsg =
      "√ìtimo! O primeiro passo para a sa√∫de financeira √© o conhecimento. üí∞\n\n" +
      "*Qual √© a sua pergunta?*\n\n" +
      "Exemplos:\n" +
      "- Como posso reduzir meus gastos?\n" +
      "- Qual o primeiro passo para investir?\n" +
      "- Vale a pena amortizar meu financiamento?\n\n" +
      "_(Digite *cancelar* a qualquer momento para voltar ao menu.)_";
    await sendTwilioMessage(fromNumber, responseMsg);
  } else if (msgLower === "2") {
    // --- [MUDAN√áA AQUI] Apenas define o estado ---
    userSessions[fromNumber] = {
      state: "AWAITING_PDF",
      data: {},
    };
    const responseMsg =
      "Certo. Para que eu possa analisar seu extrato, por favor, me envie o *arquivo PDF* do seu banco.";
    await sendTwilioMessage(fromNumber, responseMsg);
  } else if (msgLower === "3") {
    // --- INICIA A CONVERSA DE META ---
    userSessions[fromNumber] = {
      state: "AWAITING_GOAL_DESCRIPTION",
      data: {},
    };
    const responseMsg =
      "Vamos l√°! Planejar √© o segredo do sucesso. üöÄ\n\n" +
      "Primeiro, me diga: *qual √© o seu principal objetivo financeiro?*\n\n" +
      "Exemplos:\n" +
      "- Guardar dinheiro para uma viagem\n" +
      "- Come√ßar a investir para a aposentadoria\n" +
      "- Reduzir minhas d√≠vidas\n\n" +
      "_(Digite *cancelar* a qualquer momento para voltar ao menu.)_";
    await sendTwilioMessage(fromNumber, responseMsg);

    // ==============================================================
    // 2.6. Bloco Padr√£o (Sem estado e comando n√£o reconhecido)
    // ==============================================================
  } else {
    // Verifica se o usu√°rio enviou m√≠dia sem ser solicitado
    if (numMedia > 0) {
      await sendTwilioMessage(
        fromNumber,
        "Recebi um arquivo, mas n√£o tenho certeza do que fazer com ele. ü§î\n\nPor favor, digite *Menu* para ver as op√ß√µes e selecionar o que deseja."
      );
    } else {
      // Usu√°rio enviou texto aleat√≥rio
      const responseMsg =
        `Desculpe, n√£o reconheci o comando "${incomingMsg}".\n` +
        `Por favor, digite "Menu" para ver todas as op√ß√µes dispon√≠veis.`;
      await sendTwilioMessage(fromNumber, responseMsg);
    }
  }

  // --- 3. Responde 200 OK para a Twilio ---
  res.type("text/xml").send("<Response></Response>");
});

// --- ROTA ANTIGA DO FACEBOOK ---
app.get("/webhook", (req, res) => {
  res.send("Este √© o webhook da Meta, use /twilio-webhook para a Twilio.");
});

// --- INICIAR SERVIDOR ---
app.listen(PORT, () => {
  console.log(`Servidor rodando na porta ${PORT}`);
  console.log(
    "Webhook da Twilio esperando em http://localhost:" +
      PORT +
      "/twilio-webhook"
  );
});
